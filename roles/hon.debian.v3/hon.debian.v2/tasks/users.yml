# Setup groups and users

- name: "Check required fields for groups"
  loop: "{{ linux_local_groups }}"
  loop_control:
    label: "{{ item.name }}"
  when: "item.ansible_groups is not defined"
  fail:
    msg: "Missing required parameter: ansible_groups"

- name: "Check required fields for users"
  loop: "{{ linux_local_users }}"
  loop_control:
    label: "{{ item.name }}"
  when: "item.ansible_groups is not defined"
  fail:
    msg: "Missing required parameter: ansible_groups"

- name: Update system groups
  loop: "{{ linux_local_groups }}"
  loop_control:
    label: "{{ item.name }}"
  when: "item.present | default(true) and item.system | default(false) and ('all' in item.ansible_groups or item.ansible_groups | intersect(group_names) | length > 0)"
  group:
    name: "{{ item.name }}"
    system: true

- name: Update personal groups
  loop: "{{ linux_local_groups }}"
  loop_control:
    label: "{{ item.name }}"
  when: "item.present | default(true) and not item.system | default(false) and ('all' in item.ansible_groups or item.ansible_groups | intersect(group_names) | length > 0)"
  group:
    name: "{{ item.name }}"
    system: false

- name: Get user groups
  getent:
    database: group

- name: Update system users
  loop: "{{ linux_local_users }}"
  loop_control:
    label: "{{ item.name }}"
  when: "item.present | default(true) and item.system | default(false) and ('all' in item.ansible_groups or item.ansible_groups | intersect(group_names) | length > 0)"
  user:
    name: "{{ item.name }}"
    groups: "{{ item.linux_groups | default([]) | intersect(ansible_facts.getent_group) }}"
    shell: "/usr/sbin/nologin"
    system: true
    home: /nonexistent
    create_home: false

- name: Update personal users
  loop: "{{ linux_local_users }}"
  when: "item.present | default(true) and not item.system | default(false) and ('all' in item.ansible_groups or item.ansible_groups | intersect(group_names) | length > 0)"
  loop_control:
    label: "{{ item.name }}"
  user:
    name: "{{ item.name }}"
    password: "{{ item.password_hash | default('*') }}"
    groups: "{{ item.linux_groups | default([]) | intersect(ansible_facts.getent_group) }}"
    shell: "{{ item.linux_shell | default(omit) }}"

- name: Remove old users
  loop: "{{ linux_local_users }}"
  loop_control:
    label: "{{ item.name }}"
  when: "not item.present | default(true) and ('all' in item.ansible_groups or item.ansible_groups | intersect(group_names) | length > 0)"
  user:
    name: "{{ item.name }}"
    state: absent
    remove: false

- name: "Update users' authorized keys"
  loop: "{{ linux_local_users }}"
  loop_control:
    label: "{{ item.name }}"
  when: "item.present | default(true) and ('all' in item.ansible_groups or item.ansible_groups | intersect(group_names) | length > 0)"
  vars:
    ssh_keys: "{{ item.ssh_keys | default({}) }}"
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    key: "{{ lookup('template', 'users/authorized_keys.j2') }}"
    exclusive: true

# Do last to allow users to get removed from it first
- name: Remove groups
  loop: "{{ linux_local_groups }}"
  loop_control:
    label: "{{ item.name }}"
  when: "not item.present | default(true) and ('all' in item.ansible_groups or item.ansible_groups | intersect(group_names) | length > 0)"
  group:
    name: "{{ item.name }}"
    state: "absent"
