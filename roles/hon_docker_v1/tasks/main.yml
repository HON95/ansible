# Prerequisites

- name: Gather package facts
  package_facts:
    manager: apt

- name: Install APT prerequisites
  apt:
    name:
      - ca-certificates
      - gnupg
      - curl

- name: Install Docker SDKs for Python
  pip:
    name:
      - docker
      - docker-compose

# Docker setup

- name: Make sure old Docker is installed
  when: '"docker" in ansible_facts.packages
      or "docker-engine" in ansible_facts.packages
      or "docker.io" in ansible_facts.packages
      or "containerd" in ansible_facts.packages
      or "runc" in ansible_facts.packages'
  fail:
    msg: 'Old Docker is installed. Please remove it first.'

- name: Install Docker (block)
  when: '"docker-ce" not in ansible_facts.packages'
  block:
    - name: Get arch for repo
      command: 'dpkg --print-architecture'
      changed_when: false
      register: docker_dpkg_arch_result

    - name: Get OS info
      shell: '. /etc/os-release; echo $ID; echo $VERSION_ID; echo $VERSION_CODENAME'
      changed_when: false
      register: docker_os_info_result

    - name: Add GPG keyring for APT repo
      vars:
        os_distro: '{{ docker_os_info_result.stdout_lines[0] }}'
      shell: 'set -o pipefail; curl -sSf https://download.docker.com/linux/{{ os_distro }}/gpg | gpg --dearmor > {{ docker_repo_keyring_path }}'
      changed_when: true

    - name: Create repo file
      vars:
        os_distro: '{{ docker_os_info_result.stdout_lines[0] }}'
        dpkg_arch: '{{ docker_dpkg_arch_result.stdout_lines[0] }}'
        os_version_codename: '{{ docker_os_info_result.stdout_lines[2] }}'
      copy:
        content: "deb [arch={{ dpkg_arch }} signed-by={{ docker_repo_keyring_path }}] https://download.docker.com/linux/{{ os_distro }} {{ os_version_codename }} stable\n"
        dest: '{{ docker_repo_path }}'
        mode: '0644'

    - name: Update cache
      apt:
        update_cache: true

- name: Install Docker packages
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io

- name: Setup Docker daemon config
  template:
    src: '{{ docker_config_src }}'
    dest: '/etc/docker/daemon.json'
    backup: true
    mode: '0644'
  notify: Restart docker.service

- name: Enable Docker service
  service:
    name: docker.service
    enabled: true
    state: started

- name: Check swap limit support
  shell: 'set -o pipefail; docker info | grep "WARNING: No swap limit support"'
  register: docker_swap_limit_result
  changed_when: false
  failed_when: false
  ignore_errors: true

- name: Add swap limit support in GRUB config
  when: 'docker_swap_limit_result.rc == 0'
  script: file-sh-var-space-list-append.sh /etc/default/grub GRUB_CMDLINE_LINUX cgroup_enable=memory swapaccount=1
  notify: Update GRUB

- name: Warn about swap limit support changes
  when: 'docker_swap_limit_result.rc == 0'
  fail:
    msg: 'Swap limit support is not enabled yet, reboot required.'
  ignore_errors: true

- name: Verify Docker
  command: 'docker run --rm hello-world'
  changed_when: false

- name: Verify NVIDIA Container Runtime
  when: 'docker_nvidia_runtime_enable'
  command: 'docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi'
  changed_when: false

# Network setup

- name: Setup Docker MACVLAN networks
  loop: '{{ docker_networks }}'
  when: 'item.driver == "macvlan"'
  community.docker.docker_network:
    # Force is required to change details
    force: '{{ docker_network_force_update }}'
    name: '{{ item.name }}'
    driver: macvlan
    driver_options:
      com.docker.network.driver.mtu: '{{ docker_network_mtu | int }}'
      parent: '{{ item.parent_interface }}'
    enable_ipv6: true
    ipam_config:
      - subnet: '{{ item.ipv4_subnet | ansible.utils.ipaddr("subnet") }}'
      - subnet: '{{ item.ipv6_subnet | ansible.utils.ipaddr("subnet") }}'

- name: Setup Docker bridge networks
  loop: '{{ docker_networks }}'
  when: 'item.driver == "bridge"'
  community.docker.docker_network:
    # Force is required to change details
    force: '{{ docker_network_force_update }}'
    name: '{{ item.name }}'
    driver: bridge
    driver_options:
      com.docker.network.driver.mtu: '{{ docker_network_mtu | int }}'
    enable_ipv6: true
    ipam_config:
      - subnet: '{{ item.ipv4_subnet | ansible.utils.ipaddr("subnet") }}'
      - subnet: '{{ item.ipv6_subnet | ansible.utils.ipaddr("subnet") }}'
