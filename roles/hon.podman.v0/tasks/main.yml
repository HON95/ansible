# Prerequisites

- name: Install APT prerequisites
  apt:
    name:
      - ca-certificates
      - gnupg
      - curl

- name: Install Docker SDKs for Python
  pip:
    name:
      - docker
      - docker-compose

# Podman setup

- name: Get OS info
  shell: '. /etc/os-release; echo $ID; echo $VERSION_ID; echo $VERSION_CODENAME'
  changed_when: false
  register: podman_os_info_result

- name: Check if GPG keyring exists
  stat:
    path: '{{ podman_kubic_repo_keyring_path }}'
  register: podman_keyring_exists_result

- name: Add GPG keyring for APT repo (Debian)
  when: 'ansible_distribution == "Debian" and not podman_keyring_exists_result.stat.exists'
  vars:
    os_version_id: '{{ podman_os_info_result.stdout_lines[1] }}'
  shell: 'set -o pipefail; curl -sSfL https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/Debian_{{ os_version_id }}/Release.key | gpg --dearmor > {{ podman_kubic_repo_keyring_path }}'
  changed_when: true

- name: Add GPG keyring for APT repo (Ubuntu)
  when: 'ansible_distribution == "Ubuntu" and not podman_keyring_exists_result.stat.exists'
  vars:
    os_version_id: '{{ podman_os_info_result.stdout_lines[1] }}'
  shell: 'set -o pipefail; curl -sSfL https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_{{ os_version_id }}/Release.key | gpg --dearmor > {{ podman_kubic_repo_keyring_path }}'
  changed_when: true

- name: Create repo file (Debian)
  when: 'ansible_distribution == "Debian"'
  vars:
    os_version_id: '{{ podman_os_info_result.stdout_lines[1] }}'
  copy:
    content: "deb [signed-by={{ podman_kubic_repo_keyring_path }}] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_{{ os_version_id }}/ /\n"
    dest: '{{ podman_kubic_repo_path }}'
    mode: '0644'
  register: podman_repo_add_result

- name: Create repo file (Ubuntu)
  when: 'ansible_distribution == "Ubuntu"'
  vars:
    os_version_id: '{{ podman_os_info_result.stdout_lines[1] }}'
  copy:
    content: "deb [signed-by={{ podman_kubic_repo_keyring_path }}] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ os_version_id }}/ /\n"
    dest: '{{ podman_kubic_repo_path }}'
    mode: '0644'
  register: podman_repo_add_result

- name: Update cache
  when: 'podman_repo_add_result.changed'
  apt:
    update_cache: true

- name: Install Podman
  apt:
    name:
      - container-tools
      - podman
      - buildah

- name: Enable restart service
  service:
    name: podman-restart.service
    enabled: true
    state: started

# Docker compat

- name: Add Docker executable symlink (compat)
  file:
    src: /usr/bin/podman
    dest: /usr/bin/docker
    state: link
    mode: '0755'

- name: Add DOCKER_HOST env var (compat)
  lineinfile:
    path: /etc/environment
    regexp: '^DOCKER_HOST='
    line: 'DOCKER_HOST=unix:///run/podman/podman.sock'
    mode: '0644'

- name: Set sudo to accept DOCKER_HOST (compat)
  copy:
    content: "Defaults env_keep += \"DOCKER_HOST\"\n"
    dest: /etc/sudoers.d/podman-compat
    mode: '0644'

# Network setup

- name: Remove old default Podman network
  file:
    path: '{{ podman_network_default_original_path }}'
    state: absent

- name: Check if new default Podman network exists
  command: 'podman network exists podman'
  failed_when: false
  changed_when: false
  register: podman_network_default_exists_result

- name: Create new default Podman network
  when: 'podman_network_default_exists_result.rc != 0 or podman_network_force_update'
  vars:
    name: podman
    subnet_ipv4: '{{ podman_network_default_ipv4_subnet | ansible.utils.ipaddr("subnet") }}'
    subnet_ipv6: '{{ podman_network_default_ipv6_subnet | ansible.utils.ipaddr("subnet") }}'
    mtu: '{{ podman_network_mtu | int }}'
  command: 'podman network create --driver=bridge --ipv6 --opt=mtu={{ mtu }} --subnet={{ subnet_ipv4 }} --subnet={{ subnet_ipv6 }} {{ name }}'

- name: Get current Podman networks
  command: 'podman network ls -q'
  changed_when: false
  register: podman_network_list_result

- name: Create bridge networks
  loop: '{{ podman_networks }}'
  when: '(item.name not in podman_network_list_result.stdout_lines or podman_network_force_update) and item.driver == "bridge"'
  vars:
    internal: '{{ item.internal | default(false) }}'
    name: '{{ item.name }}'
    subnet_ipv4: '{{ item.ipv4_subnet | ansible.utils.ipaddr("subnet") }}'
    subnet_ipv6: '{{ item.ipv6_subnet | ansible.utils.ipaddr("subnet") }}'
    mtu: '{{ podman_network_mtu | int }}'
  command: 'podman network create --driver=bridge --internal={{ internal | bool }} --opt=mtu={{ mtu }} --subnet={{ subnet_ipv4 }} --ipv6 --subnet={{ subnet_ipv6 }} {{ name }}'
  changed_when: true

- name: Create MACVLAN networks
  loop: '{{ podman_networks }}'
  when: '(item.name not in podman_network_list_result.stdout_lines or podman_network_force_update) and item.driver == "macvlan"'
  fail:
    msg: 'WIP'

# TODO Podman MACVLAN
# - name: Setup Podman MACVLAN networks
#   loop: '{{ podman_networks }}'
#   when: 'item.driver == "macvlan"'
#   community.docker.docker_network:
#     force: '{{ podman_network_force_update }}'
#     name: '{{ item.name }}'
#     driver: macvlan
#     driver_options:
#       com.docker.network.driver.mtu: '{{ podman_network_mtu | int }}'
#       parent: '{{ item.parent_interface }}'
#     enable_ipv6: true
#     ipam_config:
#       - subnet: '{{ item.ipv4_subnet | ansible.utils.ipaddr("subnet") }}'
#       - subnet: '{{ item.ipv6_subnet | ansible.utils.ipaddr("subnet") }}'

# Verify

- name: Verify Podman
  command: 'podman run --rm docker.io/hello-world'
  changed_when: false

- name: Verify Docker compat
  when: 'podman_docker_compat_enable'
  command: 'docker run --rm hello-world'
  changed_when: false
