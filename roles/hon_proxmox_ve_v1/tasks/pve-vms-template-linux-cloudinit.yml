# Setup a Linux VM template from a Cloud-Init-enabled image.

- name: 'Setup VM template'
  debug:
    msg: '{{ vm.name }} ({{ vm_id }})'

- name: Create the VM
  when: 'vm_new'
  vars:
    cloudinit_disk: '{{ pve_storage_default_image_rootdir_name }}:vm-{{ vm_id }}-cloudinit'
  command: 'qm create "{{ vm_id }}" --name="{{ vm.name }}" --ide2="{{ cloudinit_disk }}"'
  changed_when: true

- name: Update current VM config variable
  include_tasks: pve-update-current-vm-config.yml

- name: Download and import template VM image
  when: 'vm_new'
  block:
    - name: Create temporary disk file
      tempfile: {}
      register: pve_template_vm_create_tmpfile

    - name: Download the disk image
      get_url:
        url: '{{ vm.image_download_url }}'
        dest: '{{ pve_template_vm_create_tmpfile.path }}'
        mode: '0644'
        checksum: '{{ vm.image_checksum | default(omit) }}'
        timeout: '{{ pve_download_timeout_s }}'

    - name: Import the disk image
      command: 'qm importdisk "{{ vm_id }}" "{{ pve_template_vm_create_tmpfile.path }}" "{{ pve_storage_default_image_rootdir_name }}"'
      changed_when: true

  always:
    - name: Delete temporary download file
      when: 'pve_template_vm_create_tmpfile is defined'
      file:
        path: "{{ pve_template_vm_create_tmpfile.path }}"
        state: absent

- name: Attach the disk image
  when: 'vm_new'
  command: 'qm set "{{ vm_id }}" --scsi0 "{{ pve_storage_default_image_rootdir_name }}:vm-{{ vm_id }}-disk-0,cache=writeback"'
  changed_when: true

- name: Update the VM config
  vars:
    qm_params:
      description: "{{ vm.description | default('') }}"
      ostype: "l26"
      cpu: "cputype={{ vm.cpu_type | default(pve_vm_default_cpu_type) }}"
      sockets: "{{ vm.cpu_sockets | default(pve_vm_default_cpu_sockets) | int }}"
      cores: "{{ vm.cpu_cores | default(pve_vm_default_cpu_cores) | int }}"
      numa: "1"
      memory: "{{ vm.memory_mb | default(pve_vm_default_memory_mb) | int }}"
      scsihw: "virtio-scsi-pci"
      boot: "order=scsi0;ide2"
      serial0: "socket"
      vga: "{{ vm.display | default(pve_vm_default_display) }}"
      protection: "{{ vm.protection | default(pve_vm_default_protection) | int }}"
      onboot: "{{ vm.autostart | default(pve_vm_default_autostart) | int }}"
      agent: "enabled={{ vm.qemu_agent | default(pve_vm_default_qemu_agent) | int }}"
      startup: "order={{ vm.startup_order | default(pve_vm_default_startup_order) | int }}"
      nameserver: "{{ vm.dns_servers | default(pve_vm_default_dns_servers) | join(' ') }}"
      searchdomain: "{{ vm.domain | default(pve_vm_default_domain) }}"
  loop: '{{ qm_params | list }}'
  when: 'pve_vms_current_vm_config[item] | default("") | string != qm_params[item] | string'
  command: 'qm set "{{ vm_id }}" --{{ item }} "{{ qm_params[item] }}"'
  changed_when: true

- name: Create VM network interface
  when: 'vm_new and vm_network_enable'
  command: 'qm set "{{ vm_id }}" --net0 "virtio"'
  changed_when: true

# Get directly since pve_vms_current_vm_config is outdated
- name: Get VM network config
  when: 'vm_network_enable'
  shell: 'set -o pipefail; qm config {{ vm_id }} | grep -Po "(?<=^net0: ).+"'
  register: pve_vm_net_config_result
  changed_when: false

- name: Get VM MAC address
  when: 'vm_network_enable'
  shell: 'set -o pipefail; echo "{{ pve_vm_net_config_result.stdout }}" | grep -Po "(?<=virtio=)[0-9a-fA-F:]{17}"'
  register: pve_vm_mac_address_result
  changed_when: false

- name: Update VM network config
  vars:
    old_network_string: '{{ pve_vm_net_config_result.stdout | default("") }}'
    mac_address: '{{ pve_vm_mac_address_result.stdout | default("") }}'
    network_bridge: '{{ vm.network_bridge | default(pve_vm_default_network_bridge) }}'
    network_string: 'virtio={{ mac_address }},bridge={{ network_bridge }}{% if vm.network_vlanid is defined %},tag={{ vm.network_vlanid }}{% endif %},firewall=1'
  when: 'vm_network_enable and network_string != old_network_string'
  command: 'qm set "{{ vm_id }}" --net0 "{{ network_string }}"'
  changed_when: true

- name: Make the VM a template
  when: 'vm_new'
  command: 'qm template "{{ vm_id }}"'
  changed_when: true

- name: Update VM lists
  when: 'vm_new'
  include_tasks: pve-update-vms.yml
