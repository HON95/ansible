#jinja2: trim_blocks:False
# ISC DHCP Server IPv4 configuration
# Generated by Ansible

# Ubiquiti UniFi discovery
# Use "option ubnt.unifi-address <ip>" in subnets
option space ubnt;
option ubnt.unifi-address code 1 = ip-address;
class "ubnt" {
    match if substring (option vendor-class-identifier, 0, 4) = "ubnt";
    option vendor-class-identifier "ubnt";
    vendor-option-space ubnt;
}

# Access switches
class "access-switch" {
    match if
        option vendor-class-identifier = "LGS326" or
        option vendor-class-identifier = "TL-SG3428" or
        option vendor-class-identifier = "T2600G-28TS";
}

authorative;
min-lease-time 300;
max-lease-time 86400;
default-lease-time 900;
option domain-name "{{ domain }}";
{%- for dns_server in infra_networks_defaults.ipv4_dns | default([]) %}
option domain-name-servers {{ dns_server }};
{%- endfor %}
# Disallow multiple leases per MAC address (violated DHCP)
# Alternatively: "one-lease-per-client true"
deny duplicates;
# Disable clients querying leases
deny leasequery;
# Disallow clients declining leases (IPv4 only)
deny declines;
# Disable client DDNS
ddns-update-style none;

# TODO remove?
#log-facility local7;

{%- for network in infra_networks %}
{%- if network.ipv4_dhcp | default(false) %}

# [{{ network.vlan_id }}] {{ network.id }}
subnet {{ network.ipv4_subnet | ansible.netcommon.ipaddr('network') }} netmask {{ network.ipv4_subnet | ansible.netcommon.ipaddr('netmask') }} {
    option subnet-mask {{ network.ipv4_subnet | ansible.netcommon.ipaddr('netmask') }};
    {%- if network.ipv4_subnet | ansible.netcommon.ipaddr('prefix') == 31 %}
    option routers {{ network.ipv4_subnet | ansible.netcommon.ipaddr('0') | ansible.netcommon.ipaddr('address') }};
    {%- else %}
    option routers {{ network.ipv4_subnet | ansible.netcommon.ipaddr('1') | ansible.netcommon.ipaddr('address') }};
    {%- endif %}
    {%- for dns_server in network.ipv4_dns | default([]) %}
    option domain-name-servers {{ dns_server }};
    {%- endfor %}
    {%- if network.ubnt_unifi_controller_ipv4_address is defined %}
    option ubnt.unifi-address {{ network.ubnt_unifi_controller_ipv4_address }};
    {%- endif %}
    pool {
        {%- if network.allowed_class is defined %}
        allow members of "{{ network.allowed_class }}";
        {%- endif %}
        {%- if network.ipv4_subnet | ansible.netcommon.ipaddr('prefix') == 31 %}
        range {{ network.ipv4_subnet | ansible.netcommon.ipaddr('1') | ansible.netcommon.ipaddr('address') }} {{ network.ipv4_subnet | ansible.netcommon.ipaddr('1') | ansible.netcommon.ipaddr('address') }};
        {%- elif network.ipv4_subnet | ansible.netcommon.ipaddr('prefix') == 30 %}
        range {{ network.ipv4_subnet | ansible.netcommon.ipaddr('2') | ansible.netcommon.ipaddr('address') }} {{ network.ipv4_subnet | ansible.netcommon.ipaddr('2') | ansible.netcommon.ipaddr('address') }};
        {%- else %}
        range {{ network.ipv4_subnet | ansible.netcommon.ipaddr(network.ipv4_dhcp_range_begin | default(2)) | ansible.netcommon.ipaddr('address') }} {{ network.ipv4_subnet | ansible.netcommon.ipaddr('-2') | ansible.netcommon.ipaddr('address') }};
        {%- endif %}
    }
}

{%- for host in network.hosts | default([]) %}
{%- if host.ipv4_address is defined %}

host {{ host.id }} {
    hardware ethernet {{ host.mac_address }};
    fixed-address {{ host.ipv4_address | ansible.netcommon.ipaddr }};
}
{%- endif %}
{%- endfor %}
{%- endif %}{# ipv4_dhcp #}
{%- endfor %}{# infra_networks #}
